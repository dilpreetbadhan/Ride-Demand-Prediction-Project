
Here is the whole for this project 

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error
import datetime

# Function to load data
def load_data(ride_file, weather_file):
    """ Load ride and weather data from CSV files. """
    ride_data = pd.read_csv(ride_file)
    weather_data = pd.read_csv(weather_file)
    return ride_data, weather_data

# Data cleaning and merging
def clean_and_merge(ride_data, weather_data):
    """ Clean data and merge datasets on the 'date' column. """
    # Convert date columns to datetime
    ride_data['date'] = pd.to_datetime(ride_data['date'])
    weather_data['date'] = pd.to_datetime(weather_data['date'])

    # Merge on the date column
    merged_data = pd.merge(ride_data, weather_data, on='date', how='left')
    # Handle missing values - forward fill for simplicity
    merged_data.fillna(method='ffill', inplace=True)
    return merged_data

# Feature engineering
def feature_engineering(data):
    """ Enhance data with new time-based and weather-based features. """
    data['month'] = data['date'].dt.month
    data['day_of_week'] = data['date'].dt.weekday
    data['is_weekend'] = (data['day_of_week'] > 4).astype(int)
    data['high_temp'] = (data['temp'] > 75).astype(int)
    return data

# Exploratory data analysis
def exploratory_data_analysis(data):
    """ Perform and display exploratory data analysis. """
    plt.figure(figsize=(10, 6))
    sns.lineplot(x='date', y='temp', data=data)
    plt.title('Temperature Over Time')
    plt.xlabel('Date')
    plt.ylabel('Temperature (F)')
    plt.show()

    plt.figure(figsize=(10, 6))
    sns.barplot(x='month', y='ride_count', data=data, estimator=np.sum, ci=None)
    plt.title('Ride Count by Month')
    plt.xlabel('Month')
    plt.ylabel('Total Rides')
    plt.show()

# Predictive modeling
def build_and_evaluate_model(data):
    """ Build a linear regression model and evaluate it. """
    features = ['month', 'temp', 'precip', 'humidity', 'is_weekend', 'high_temp']
    X = data[features]
    y = data['ride_count']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

    model = LinearRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    mae = mean_absolute_error(y_test, y_pred)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    print(f"Mean Absolute Error: {mae}")
    print(f"Root Mean Squared Error: {rmse}")

# Main function to run all steps
def main():
    ride_data, weather_data = load_data('ride_data.csv', 'weather_data.csv')
    merged_data = clean_and_merge(ride_data, weather_data)
    enhanced_data = feature_engineering(merged_data)
    exploratory_data_analysis(enhanced_data)
    build_and_evaluate_model(enhanced_data)

if __name__ == "__main__":
    main()
